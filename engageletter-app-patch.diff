From e1650507082cc42f5826eee8e551257b7f5e2233 Mon Sep 17 00:00:00 2001
From: Ross Crawford-d'Heureuse <ross@lawpal.com>
Date: Tue, 14 Jan 2014 13:09:44 +0100
Subject: [PATCH] Added new tool fixture

---
 toolkit/apps/workspace/fixtures/tools.json | 19 +++++++++----------
 1 file changed, 9 insertions(+), 10 deletions(-)

diff --git a/toolkit/apps/workspace/fixtures/tools.json b/toolkit/apps/workspace/fixtures/tools.json
index 1e26644..4971170 100644
--- a/toolkit/apps/workspace/fixtures/tools.json
+++ b/toolkit/apps/workspace/fixtures/tools.json
@@ -26,20 +26,19 @@
     "fields": {
       "data": {
         "icon": "images/icons/clipboard.svg",
-        "short_name": "Checklist",
-        "summary": "summary goes here",
-        "description": "Long description",
-        "model_name": "Checklist",
+        "short_name": "Engagement Letter",
+        "summary": "",
+        "description": "",
+        "model_name": "EngagementLetter",
         "forms": {
-          "customer": "toolkit.apps.checklist.forms.Checklist",
-          "lawyer": "toolkit.apps.checklist.forms.Checklist"
+          "customer": "toolkit.apps.engageletter.forms.CustomerForm",
+          "lawyer": "toolkit.apps.engageletter.forms.LawyerForm"
         },
-        "form": "toolkit.apps.checklist.forms.Checklist",
-        "app_label": "checklist",
+        "app_label": "engageletter",
         "can_create": ["lawyer"]
       },
-      "name": "Checklist",
-      "slug": "checklist"
+      "name": "Enagement Letter",
+      "slug": "engagement-letters"
     }
   }
 ]
-- 
1.8.4.2

From 37cb97779fc1234367e8e960839f2a0d4f3ea440 Mon Sep 17 00:00:00 2001
From: Ross Crawford-d'Heureuse <ross@lawpal.com>
Date: Tue, 14 Jan 2014 13:10:02 +0100
Subject: [PATCH] Added missing marker.val test

---
 toolkit/apps/eightythreeb/tests/test_markers.py | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/toolkit/apps/eightythreeb/tests/test_markers.py b/toolkit/apps/eightythreeb/tests/test_markers.py
index be0ae59..5b5178f 100644
--- a/toolkit/apps/eightythreeb/tests/test_markers.py
+++ b/toolkit/apps/eightythreeb/tests/test_markers.py
@@ -64,6 +64,7 @@ class BaseTestMarker(BaseScenarios, TestCase):
 
     def test_has_properties(self):
         self.assertTrue(hasattr(self.subject, 'tool'))
+        self.assertTrue(hasattr(self.subject, 'val'))
         self.assertTrue(hasattr(self.subject, 'name'))
         self.assertTrue(hasattr(self.subject, 'description'))
         self.assertTrue(hasattr(self.subject, 'signals'))
@@ -86,6 +87,7 @@ class LawyerCompleteFormMarkerTest(BaseTestMarker):
     def test_properties(self):
         self.assertTrue(type(self.subject), self.clazz)
         self.assertEqual(self.subject.name, 'lawyer_complete_form')
+        self.assertEqual(self.subject.val, self.val)
         self.assertEqual(self.subject.description, 'Attorney: Setup 83(b) Election Letter')
         self.assertEqual(self.subject.signals, ['toolkit.apps.eightythreeb.signals.lawyer_complete_form'])
         self.assertEqual(self.subject.action_name, 'Setup 83(b)')
@@ -117,6 +119,7 @@ class LawyerInviteUserMarkerTest(BaseTestMarker):
     def test_properties(self):
         self.assertTrue(type(self.subject), self.clazz)
         self.assertEqual(self.subject.name, 'lawyer_invite_customer')
+        self.assertEqual(self.subject.val, self.val)
         self.assertEqual(self.subject.description, 'Attorney: Invite client to complete the 83(b) Election Letter')
         self.assertEqual(self.subject.signals, ['toolkit.apps.eightythreeb.signals.lawyer_invite_customer'])
         self.assertEqual(self.subject.action_name, 'Invite Client')
@@ -163,6 +166,7 @@ class CustomerCompleteFormMarkerTest(BaseTestMarker):
     def test_properties(self):
         self.assertTrue(type(self.subject), self.clazz)
         self.assertEqual(self.subject.name, 'customer_complete_form')
+        self.assertEqual(self.subject.val, self.val)
         self.assertEqual(self.subject.description, 'Client: Complete 83(b) Election Letter')
         self.assertEqual(self.subject.signals, ['toolkit.apps.eightythreeb.signals.customer_complete_form'])
         self.assertEqual(self.subject.action_name, 'Complete 83(b)')
@@ -196,6 +200,7 @@ class CustomerDownloadDocMarkerTest(BaseTestMarker):
     def test_properties(self):
         self.assertTrue(type(self.subject), self.clazz)
         self.assertEqual(self.subject.name, 'customer_download_pdf')
+        self.assertEqual(self.subject.val, self.val)
         self.assertEqual(self.subject.description, 'Client: Download 83(b) Election Letter and Instructions')
         self.assertEqual(self.subject.long_description, '')
         self.assertEqual(self.subject.signals, ['toolkit.apps.eightythreeb.signals.customer_download_pdf'])
@@ -227,6 +232,7 @@ class CustomerPrintAndSignMarkerTest(BaseTestMarker):
     def test_properties(self):
         self.assertTrue(type(self.subject), self.clazz)
         self.assertEqual(self.subject.name, 'customer_print_and_sign')
+        self.assertEqual(self.subject.val, self.val)
         self.assertEqual(self.subject.description, 'Client: Print, check and sign 83(b) Election Letter')
         self.assertEqual(self.subject.long_description, 'Print and sign the 83(b) Election where indicated.')
         self.assertEqual(self.subject.signals, ['toolkit.apps.eightythreeb.signals.customer_print_and_sign'])
@@ -268,6 +274,7 @@ class CustomerUploadScanMarkerTest(BaseTestMarker):
     def test_properties(self):
         self.assertTrue(type(self.subject), self.clazz)
         self.assertEqual(self.subject.name, 'copy_uploaded')
+        self.assertEqual(self.subject.val, self.val)
         self.assertEqual(self.subject.description, 'Client: Scan and upload signed copy')
         self.assertEqual(self.subject.long_description, None)
         self.assertEqual(self.subject.signals, ['toolkit.apps.eightythreeb.signals.copy_uploaded'])
@@ -287,6 +294,7 @@ class CustomerValidTrackingNumberMarkerTest(BaseTestMarker):
     def test_properties(self):
         self.assertTrue(type(self.subject), self.clazz)
         self.assertEqual(self.subject.name, 'valid_usps_tracking_marker')
+        self.assertEqual(self.subject.val, self.val)
         self.assertEqual(self.subject.description, 'Client: Has provided a valid USPS Tracking Code')
         self.assertEqual(self.subject.long_description, 'This marker will indicate the date a valid USPS Tracking Number was entered')
         self.assertEqual(self.subject.signals, ['toolkit.apps.eightythreeb.signals.valid_usps_tracking_marker'])
@@ -305,6 +313,7 @@ class CustomerTrackingNumberMarkerTest(BaseTestMarker):
     def test_properties(self):
         self.assertTrue(type(self.subject), self.clazz)
         self.assertEqual(self.subject.name, 'mail_to_irs_tracking_code')
+        self.assertEqual(self.subject.val, self.val)
         self.assertEqual(self.subject.description, 'Client: Mail to IRS & register Tracking Code')
         self.assertEqual(self.subject.long_description, 'Mail 83(b) form using USPS Registered Post *ONLY* and enter the Tracking Number here')
         self.assertEqual(self.subject.signals, ['toolkit.apps.eightythreeb.signals.mail_to_irs_tracking_code'])
@@ -344,6 +353,7 @@ class USPSDeliveryStatusMarkerTest(BaseTestMarker):
     def test_properties(self):
         self.assertTrue(type(self.subject), self.clazz)
         self.assertEqual(self.subject.name, 'irs_recieved')
+        self.assertEqual(self.subject.val, self.val)
         self.assertEqual(self.subject.description, 'Waiting for reciept of 83(b) by IRS (via USPS) for %s' % TRACKING_CODE)
         self.assertEqual(self.subject.long_description, 'Waiting for USPS response')
         self.assertEqual(self.subject.signals, ['toolkit.apps.eightythreeb.signals.irs_recieved'])
@@ -367,6 +377,7 @@ class ProcessCompleteMarkerTest(BaseTestMarker):
     def test_properties(self):
         self.assertTrue(type(self.subject), self.clazz)
         self.assertEqual(self.subject.name, 'complete')
+        self.assertEqual(self.subject.val, self.val)
         self.assertEqual(self.subject.description, 'Process Complete')
         self.assertEqual(self.subject.long_description, None)
         self.assertEqual(self.subject.signals, ['toolkit.apps.eightythreeb.signals.complete'])
-- 
1.8.4.2

From 314e51ceec5425f80cbf1015b45ea08b31377109 Mon Sep 17 00:00:00 2001
From: Ross Crawford-d'Heureuse <ross@lawpal.com>
Date: Tue, 14 Jan 2014 13:10:31 +0100
Subject: [PATCH] Added engage letter app and marker tests

---
 toolkit/apps/engageletter/__init__.py              |   0
 toolkit/apps/engageletter/admin.py                 |   3 +
 toolkit/apps/engageletter/forms.py                 |  24 +++
 toolkit/apps/engageletter/mailers.py               |  56 ++++++
 toolkit/apps/engageletter/markers.py               |  91 ++++++++++
 toolkit/apps/engageletter/mixins.py                |   3 +
 toolkit/apps/engageletter/models.py                |  95 ++++++++++
 toolkit/apps/engageletter/services.py              |   0
 toolkit/apps/engageletter/signals.py               | 156 ++++++++++++++++
 .../templates/engageletter/engageletter.html       |   0
 toolkit/apps/engageletter/tests/__init__.py        |   2 +
 toolkit/apps/engageletter/tests/test_markers.py    | 199 +++++++++++++++++++++
 toolkit/apps/engageletter/urls.py                  |   0
 toolkit/apps/engageletter/views.py                 |   3 +
 14 files changed, 632 insertions(+)
 create mode 100644 toolkit/apps/engageletter/__init__.py
 create mode 100644 toolkit/apps/engageletter/admin.py
 create mode 100644 toolkit/apps/engageletter/forms.py
 create mode 100644 toolkit/apps/engageletter/mailers.py
 create mode 100644 toolkit/apps/engageletter/markers.py
 create mode 100644 toolkit/apps/engageletter/mixins.py
 create mode 100644 toolkit/apps/engageletter/models.py
 create mode 100644 toolkit/apps/engageletter/services.py
 create mode 100644 toolkit/apps/engageletter/signals.py
 create mode 100644 toolkit/apps/engageletter/templates/engageletter/engageletter.html
 create mode 100644 toolkit/apps/engageletter/tests/__init__.py
 create mode 100644 toolkit/apps/engageletter/tests/test_markers.py
 create mode 100644 toolkit/apps/engageletter/urls.py
 create mode 100644 toolkit/apps/engageletter/views.py

diff --git a/toolkit/apps/engageletter/__init__.py b/toolkit/apps/engageletter/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/toolkit/apps/engageletter/admin.py b/toolkit/apps/engageletter/admin.py
new file mode 100644
index 0000000..8c38f3f
--- /dev/null
+++ b/toolkit/apps/engageletter/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/toolkit/apps/engageletter/forms.py b/toolkit/apps/engageletter/forms.py
new file mode 100644
index 0000000..3356d81
--- /dev/null
+++ b/toolkit/apps/engageletter/forms.py
@@ -0,0 +1,24 @@
+# -*- coding: utf-8 -*-
+from parsley.decorators import parsleyfy
+
+from .signals import lawyer_setup_template, lawyer_complete_form, customer_complete_form 
+
+import datetime
+
+import logging
+logger = logging.getLogger('django.request')
+
+
+def _current_year():
+    return datetime.datetime.utcnow().year
+
+
+class BaseForm(WorkspaceToolFormMixin): pass
+
+
+@parsleyfy
+class CustomerForm(BaseForm): pass
+
+
+@parsleyfy
+class LawyerForm(BaseForm): pass
\ No newline at end of file
diff --git a/toolkit/apps/engageletter/mailers.py b/toolkit/apps/engageletter/mailers.py
new file mode 100644
index 0000000..eba532e
--- /dev/null
+++ b/toolkit/apps/engageletter/mailers.py
@@ -0,0 +1,56 @@
+# -*- coding: utf-8 -*-
+from django.conf import settings
+from toolkit.mailers import BaseMailerService, BaseSpecifiedFromMailerService
+from django.core.files.base import ContentFile
+from django.core.files.storage import default_storage
+
+
+
+class EightyThreeBReminderEmail(BaseSpecifiedFromMailerService):
+    """
+    m = EightyThreeBReminderEmail(from_tuple=('Ross', 'ross@lawpal.com'), recipients=(('Alex', 'alex@lawpal.com')))
+    m.process(company='',
+              url='https://lawpal.com/workspace/lawpal-internal-d570/tool/83b-election-letters/c1b7d38cf90a4c158ae8e7b810d4c7f6/preview/',
+              current_status='Description of the current step',
+              next_step='Description of the next step',
+              current_step=2,
+              total_steps=4,
+              num_days_left=3,
+              instance=instance_of_83b)
+    """
+    email_template = 'eightythreeb_reminder'
+
+
+
+class EightyThreeTrackingCodeEnteredEmail(BaseMailerService):
+    """
+    Send an email to all participants with the attachments
+
+    m = EightyThreeTrackingCodeEnteredEmail(recipients=(('Alex', 'alex@lawpal.com')))
+    m.process(instance=:instance)
+    """
+    email_template = 'eightythreeb_trackingcode_attached'
+
+    def process(self, **kwargs):
+        """
+        This override will download the attachments and send them to the email as
+        attachments; @TODO make this an async task
+        """
+        instance = kwargs.get('instance')
+
+        attachments = []
+        for a in instance.attachment_set.all():
+            path = default_storage.save(a.attachment.name, ContentFile(a.attachment.read()))
+            attachments.append('%s/%s' % (settings.MEDIA_ROOT, path,))  # append the name path to list
+
+        super(EightyThreeTrackingCodeEnteredEmail, self).process(attachments=attachments,
+                                                                 **kwargs)
+
+
+
+class EightyThreeMailDeliveredEmail(BaseSpecifiedFromMailerService):
+    """
+    m = EightyThreeMailDeliveredEmail(from_tuple=('Ross', 'ross@lawpal.com'), recipients=(('Alex', 'alex@lawpal.com')))
+    m.process(instance='')
+    """
+    email_template = 'eightythreeb_delivered'
diff --git a/toolkit/apps/engageletter/markers.py b/toolkit/apps/engageletter/markers.py
new file mode 100644
index 0000000..63743bd
--- /dev/null
+++ b/toolkit/apps/engageletter/markers.py
@@ -0,0 +1,91 @@
+# -*- coding: utf-8 -*-
+from toolkit.apps.workspace.markers import BaseSignalMarkers, Marker
+
+
+class LawyerSetupTemplateMarker(Marker):
+    name = 'lawyer_setup_template'
+    description = 'Attorney: Setup Engagement Letter Template'
+    signals = ['toolkit.apps.engageletter.signals.lawyer_setup_template']
+
+    action_name = 'Setup Engagement Letter Template'
+    action_type = Marker.ACTION_TYPE.redirect
+    action_user_class = ['lawyer']
+
+
+class LawyerCreateLetterMarker(Marker):
+    name = 'lawyer_complete_form'
+    description = 'Attorney: Create Engagement Letter'
+    signals = ['toolkit.apps.engageletter.signals.lawyer_complete_form']
+
+    action_name = 'Create Engagement Letter'
+    action_type = Marker.ACTION_TYPE.redirect
+    action_user_class = ['lawyer']
+
+
+class LawyerInviteUserMarker(Marker):
+    name = 'lawyer_invite_customer'
+    description = 'Attorney: Invite client to complete & sign the Engagement Letter'
+    signals = ['toolkit.apps.engageletter.signals.lawyer_invite_customer']
+
+    action_name = 'Invite Client to Complete & Sign'
+    action_type = Marker.ACTION_TYPE.redirect
+    action_user_class = ['lawyer']
+
+
+class CustomerCompleteLetterFormMarker(Marker):
+    name = 'customer_complete_form'
+    description = 'Client: Complete Engagement Letter'
+    signals = ['toolkit.apps.engageletter.signals.customer_complete_form']
+
+    action_name = 'Complete Engagement Letter'
+    action_type = Marker.ACTION_TYPE.redirect
+    action_user_class = ['customer']
+
+
+class CustomerSignAndSendMarker(Marker):
+    name = 'customer_sign_and_send'
+    description = 'Client: Sign & Send the Engagement Letter'
+    signals = ['toolkit.apps.engageletter.signals.customer_sign_and_send']
+
+    action_name = 'Complete Engagement Letter'
+    action_type = Marker.ACTION_TYPE.redirect
+    action_user_class = ['customer']
+
+
+class CustomerDownloadMarker(Marker):
+    name = 'customer_download_letter'
+    description = 'Client: Download Signed Engagement Letter'
+    signals = ['toolkit.apps.engageletter.signals.customer_download_letter']
+
+    action_name = 'Download Engagement Letter'
+    action_type = Marker.ACTION_TYPE.redirect
+    action_user_class = ['customer']
+
+
+class LawyerDownloadMarker(Marker):
+    name = 'lawyer_download_letter'
+    description = 'Attorney: Download Signed Engagement Letter'
+    signals = ['toolkit.apps.engageletter.signals.lawyer_download_letter']
+
+    action_name = 'Download Engagement Letter'
+    action_type = Marker.ACTION_TYPE.redirect
+    action_user_class = ['lawyer']
+
+
+class ProcessCompleteMarker(Marker):
+    name = 'complete'
+    description = 'Process Complete'
+    signals = ['toolkit.apps.engageletter.signals.complete']
+
+
+class EngagementLetterSignalMarkers(BaseSignalMarkers):
+    signal_map = [
+        LawyerSetupTemplateMarker(0),
+        LawyerCreateLetterMarker(1),
+        LawyerInviteUserMarker(2),
+        CustomerCompleteLetterFormMarker(3),
+        CustomerSignAndSendMarker(4),
+        CustomerDownloadMarker(5),
+        LawyerDownloadMarker(6),
+        ProcessCompleteMarker(7)
+    ]
diff --git a/toolkit/apps/engageletter/mixins.py b/toolkit/apps/engageletter/mixins.py
new file mode 100644
index 0000000..3131fad
--- /dev/null
+++ b/toolkit/apps/engageletter/mixins.py
@@ -0,0 +1,3 @@
+# -*- coding: utf-8 -*-
+
+from toolkit.apps.eightythreeb.mixins import *
\ No newline at end of file
diff --git a/toolkit/apps/engageletter/models.py b/toolkit/apps/engageletter/models.py
new file mode 100644
index 0000000..b9397d2
--- /dev/null
+++ b/toolkit/apps/engageletter/models.py
@@ -0,0 +1,95 @@
+# -*- coding: utf-8 -*-
+from django.db import models
+from django.core.urlresolvers import reverse
+from django.template.defaultfilters import slugify
+
+from uuidfield import UUIDField
+from jsonfield import JSONField
+
+from rulez import registry as rulez_registry
+
+from toolkit.apps.workspace.mixins import WorkspaceToolModelMixin
+
+from .markers import EngagementLetterSignalMarkers
+ENGAGEMENTLETTER_STATUS = EngagementLetterSignalMarkers().named_tuple(name='ENGAGEMENTLETTER_STATUS')
+
+from .mixins import (IsDeletedMixin,
+                     StatusMixin,
+                     HTMLMixin)
+
+
+class EngagementLetter(StatusMixin, IsDeletedMixin, HTMLMixin, WorkspaceToolModelMixin, models.Model):
+    """
+    Enagement Letter model
+    """
+    STATUS = ENGAGEMENTLETTER_STATUS
+
+    pdf_template_name = 'engageletter/engageletter.html'  # @TODO what is this doing here?
+
+    slug = UUIDField(auto=True, db_index=True)
+    workspace = models.ForeignKey('workspace.Workspace')
+    user = models.ForeignKey('auth.User')
+
+    data = JSONField(default={})
+
+    filing_date = models.DateField(auto_now=False, auto_now_add=False, blank=True, null=True)  # remove the null=True after migrations 0002,0003 applied
+    transfer_date = models.DateField(auto_now=False, auto_now_add=False, blank=True, null=True)  # remove the null=True after migrations 0002,0003 applied
+
+    status = models.IntegerField(choices=ENGAGEMENTLETTER_STATUS.get_choices(), default=ENGAGEMENTLETTER_STATUS.lawyer_setup_template, db_index=True)
+
+    _markers = None
+
+    def __unicode__(self):
+        return u'Engagement Letter for %s' % self.client_name
+
+    @property
+    def tool_slug(self):
+        return 'enagement-letters'
+
+    @property
+    def markers(self):
+        if self._markers is None:
+            self._markers = EngagementLetterSignalMarkers(tool=self)
+        return self._markers
+
+    @property
+    def base_signal(self):
+        from .signals import base_signal
+        return base_signal
+
+    @property
+    def is_complete(self):
+        return self.status == self.STATUS.complete
+
+    @property
+    def client_name(self):
+        return self.data.get('client_full_name', None)
+
+    @property
+    def filename(self):
+        return slugify('engageletter-{company}-{user}'.format(company=self.workspace, user=self.user.get_full_name() or self.user.username))
+
+    @property
+    def company_name(self):
+        return self.data.get('company_name', self.workspace.name)
+
+    def get_absolute_url(self):
+        return reverse('workspace:tool_object_preview', kwargs={'workspace': self.workspace.slug, 'tool': self.workspace.tools.filter(slug=self.tool_slug).first().slug, 'slug': self.slug})
+
+    def get_edit_url(self):
+        return reverse('workspace:tool_object_edit', kwargs={'workspace': self.workspace.slug, 'tool': self.workspace.tools.filter(slug=self.tool_slug).first().slug, 'slug': self.slug})
+
+    def can_read(self, user):
+        return user in self.workspace.participants.all()
+
+    def can_edit(self, user):
+        return user in self.workspace.participants.all()
+
+    def can_delete(self, user):
+        return user.profile.is_lawyer and user in self.workspace.participants.all()
+
+rulez_registry.register("can_read", EngagementLetter)
+rulez_registry.register("can_edit", EngagementLetter)
+rulez_registry.register("can_delete", EngagementLetter)
+
+from .signals import *
diff --git a/toolkit/apps/engageletter/services.py b/toolkit/apps/engageletter/services.py
new file mode 100644
index 0000000..e69de29
diff --git a/toolkit/apps/engageletter/signals.py b/toolkit/apps/engageletter/signals.py
new file mode 100644
index 0000000..956384d
--- /dev/null
+++ b/toolkit/apps/engageletter/signals.py
@@ -0,0 +1,156 @@
+# -*- coding: utf-8 -*-
+from django.dispatch import Signal, receiver
+
+from .markers import EngagementLetterSignalMarkers
+
+import datetime
+
+import logging
+logger = logging.getLogger('django.request')
+
+
+""" Primary signal used as wrapper for others """
+base_signal = Signal(providing_args=['actor'])
+""" Sundry signals """
+lawyer_setup_template = Signal(providing_args=['actor'])
+lawyer_complete_form = Signal(providing_args=['actor'])
+lawyer_invite_customer = Signal(providing_args=['actor'])
+customer_complete_form = Signal(providing_args=['actor'])
+customer_sign_and_send = Signal(providing_args=['actor'])
+customer_download_letter = Signal(providing_args=['actor'])
+lawyer_download_letter = Signal(providing_args=['actor'])
+complete = Signal(providing_args=['actor'])
+
+
+@receiver(base_signal)
+def on_base_signal(sender, instance, actor, **kwargs):
+    """
+    Primary handler that is called and will calculate the current and
+    previous instance marker status, and issue the appropriate signals
+    """
+    markers = instance.markers
+
+    # if we are provided a kwargs "name" then use that.. otherwise use the current instance marker
+    marker_node = markers.marker(val=kwargs.get('name', instance.status))
+
+    if hasattr(marker_node, 'issue_signals'):
+        marker_node.issue_signals(request=sender, instance=instance, actor=actor)
+    else:
+        logger.error('Requested signal marker "%s" has no issue_signals method' % marker_node)
+
+
+def _update_marker(marker_name, next_status, actor_name, instance, **kwargs):
+    """
+    Shared process used by signals to perform status updates
+    """
+    # get the data markers
+    markers = instance.data.get('markers', {})
+    # capture fields to update
+    update_fields = []
+
+    # set our key
+    #if instance.status < next_status:
+
+    kwargs.update({
+        'date_of': datetime.datetime.utcnow(),
+        'actor_name': actor_name
+    })
+    markers[marker_name] = kwargs
+
+    # update markers object @TODO race condition?
+    instance.data['markers'] = markers
+
+    update_fields.append('data')
+
+    # set the next status
+    # @BUSINESSRULE only update if the current status is less than our reqeusted status
+    if instance.status < next_status:
+        instance.status = next_status
+        update_fields.append('status')
+
+    # save
+    instance.save(update_fields=update_fields)
+
+
+@receiver(lawyer_setup_template)
+def on_lawyer_setup_template(sender, instance, actor, **kwargs):
+    if instance.markers.current.can_perform_action(user=actor):
+        actor_name = actor.get_full_name()
+        _update_marker(marker_name='lawyer_setup_template',
+                       next_status=instance.markers.next.val,
+                       actor_name=actor_name,
+                       instance=instance)
+
+
+@receiver(lawyer_complete_form)
+def on_lawyer_complete_form(sender, instance, actor, **kwargs):
+    if instance.markers.current.can_perform_action(user=actor):
+        actor_name = actor.get_full_name()
+        _update_marker(marker_name='lawyer_complete_form',
+                       next_status=instance.markers.next.val,
+                       actor_name=actor_name,
+                       instance=instance)
+
+
+@receiver(lawyer_invite_customer)
+def on_lawyer_invite_customer(sender, instance, actor, **kwargs):
+    if instance.markers.current.can_perform_action(user=actor):
+        actor_name = actor.get_full_name()
+        _update_marker(marker_name='lawyer_invite_customer',
+                       next_status=instance.markers.next.val,
+                       actor_name=actor_name,
+                       instance=instance)
+
+
+@receiver(customer_complete_form)
+def on_customer_complete_form(sender, instance, actor, **kwargs):
+    if instance.markers.current.can_perform_action(user=actor):
+        actor_name = actor.get_full_name()
+        _update_marker(marker_name='customer_complete_form',
+                       next_status=instance.markers.next.val,
+                       actor_name=actor_name,
+                       instance=instance)
+
+
+@receiver(customer_sign_and_send)
+def on_customer_sign_and_send(sender, instance, actor, **kwargs):
+    if instance.markers.current.can_perform_action(user=actor):
+        actor_name = actor.get_full_name()
+        _update_marker(marker_name='customer_sign_and_send',
+                       next_status=instance.markers.next.val,
+                       actor_name=actor_name,
+                       instance=instance)
+
+
+@receiver(customer_download_letter)
+def on_customer_download_letter(sender, instance, actor, **kwargs):
+    if instance.markers.current.can_perform_action(user=actor):
+        actor_name = actor.get_full_name()
+        _update_marker(marker_name='customer_download_letter',
+                       next_status=instance.markers.next.val,
+                       actor_name=actor_name,
+                       instance=instance)
+        # @TODO issue complete signal
+
+
+@receiver(lawyer_download_letter)
+def on_lawyer_download_letter(sender, instance, actor, **kwargs):
+    if instance.markers.current.can_perform_action(user=actor):
+        actor_name = actor.get_full_name()
+        _update_marker(marker_name='lawyer_download_letter',
+                       next_status=instance.markers.next.val,
+                       actor_name=actor_name,
+                       instance=instance)
+        # @TODO issue complete signal
+
+
+@receiver(complete)
+def on_complete(sender, instance, actor, **kwargs):
+    if instance.markers.current.can_perform_action(user=actor):
+      # @TODO if thelawyer has downloaded AND the customer has downloaded then its complete
+      actor_name = actor.get_full_name()
+      # Send the final event here
+      _update_marker(marker_name='complete',
+                     next_status=instance.markers.next.val,
+                     actor_name=actor_name,
+                     instance=instance)
diff --git a/toolkit/apps/engageletter/templates/engageletter/engageletter.html b/toolkit/apps/engageletter/templates/engageletter/engageletter.html
new file mode 100644
index 0000000..e69de29
diff --git a/toolkit/apps/engageletter/tests/__init__.py b/toolkit/apps/engageletter/tests/__init__.py
new file mode 100644
index 0000000..39a2ab8
--- /dev/null
+++ b/toolkit/apps/engageletter/tests/__init__.py
@@ -0,0 +1,2 @@
+# -*- coding: utf-8 -*-
+from .test_markers import *
\ No newline at end of file
diff --git a/toolkit/apps/engageletter/tests/test_markers.py b/toolkit/apps/engageletter/tests/test_markers.py
new file mode 100644
index 0000000..268f1a0
--- /dev/null
+++ b/toolkit/apps/engageletter/tests/test_markers.py
@@ -0,0 +1,199 @@
+# -*- coding: utf-8 -*-
+from django.test import TestCase
+from django.core.urlresolvers import reverse
+
+import mock
+
+from toolkit.apps.workspace.markers import Marker
+from toolkit.casper.workflow_case import BaseScenarios
+
+from ..markers import EngagementLetterSignalMarkers
+from ..markers import (LawyerSetupTemplateMarker,
+                      LawyerCreateLetterMarker,
+                      LawyerInviteUserMarker,
+                      CustomerCompleteLetterFormMarker,
+                      CustomerSignAndSendMarker,
+                      CustomerDownloadMarker,
+                      LawyerDownloadMarker,
+                      ProcessCompleteMarker)
+
+
+class EngagementLetterSignalMarkersTest(TestCase):
+    """
+    Test the base engagement letter signal markers handler
+    """
+    def setUp(self):
+        super(EngagementLetterSignalMarkersTest, self).setUp()
+        self.subject = EngagementLetterSignalMarkers
+
+    def test_correct_init(self):
+        subject = self.subject()
+        self.assertEqual(len(subject.signal_map), 8)
+
+    def test_signal_map_name_vals(self):
+        subject = self.subject()
+        name_vals = [(m.name, m.val) for m in subject.signal_map]
+
+        self.assertEqual(len(name_vals), 8)
+
+        self.assertEqual(name_vals, [('lawyer_setup_template', 0),
+                                     ('lawyer_complete_form', 1),
+                                     ('lawyer_invite_customer', 2),
+                                     ('customer_complete_form', 3),
+                                     ('customer_sign_and_send', 4),
+                                     ('customer_download_letter', 5),
+                                     ('lawyer_download_letter', 6),
+                                     ('complete', 7)])
+
+
+class BaseTestMarker(BaseScenarios, TestCase):
+    val = None
+    clazz = LawyerSetupTemplateMarker
+
+    def setUp(self):
+        super(BaseTestMarker, self).setUp()
+        self.basic_workspace()
+
+        self.subject = self.clazz(self.val)
+        self.subject.tool = self.eightythreeb
+
+    def test_has_properties(self):
+        self.assertTrue(hasattr(self.subject, 'tool'))
+        self.assertTrue(hasattr(self.subject, 'val'))
+        self.assertTrue(hasattr(self.subject, 'name'))
+        self.assertTrue(hasattr(self.subject, 'description'))
+        self.assertTrue(hasattr(self.subject, 'signals'))
+        self.assertTrue(hasattr(self.subject, 'action_name'))
+        self.assertTrue(hasattr(self.subject, 'action_type'))
+        self.assertTrue(hasattr(self.subject, 'action_user_class'))
+
+    def test_action_attribs(self):
+        self.assertEqual(self.subject.action_attribs, {})
+
+    def test_get_action_url(self):
+        with self.assertRaises(NotImplementedError):
+            self.subject.get_action_url()
+
+    def test_action(self):
+        with self.assertRaises(NotImplementedError):
+            self.subject.action
+
+
+class LawyerSetupTemplateMarkerTest(BaseTestMarker):
+    val = 0
+    clazz = LawyerSetupTemplateMarker
+
+    def test_properties(self):
+        self.assertTrue(type(self.subject), self.clazz)
+        self.assertEqual(self.subject.val, self.val)
+        self.assertEqual(self.subject.name, 'lawyer_setup_template')
+        self.assertEqual(self.subject.description, 'Attorney: Setup Engagement Letter Template')
+        self.assertEqual(self.subject.signals, ['toolkit.apps.engageletter.signals.lawyer_setup_template'])
+        self.assertEqual(self.subject.action_name, 'Setup Engagement Letter Template')
+        self.assertEqual(self.subject.action_type, Marker.ACTION_TYPE.redirect)
+        self.assertEqual(self.subject.action_user_class, ['lawyer'])
+
+
+class LawyerCreateLetterMarkerTest(BaseTestMarker):
+    val = 0
+    clazz = LawyerCreateLetterMarker
+
+    def test_properties(self):
+        self.assertTrue(type(self.subject), self.clazz)
+        self.assertEqual(self.subject.val, self.val)
+        self.assertEqual(self.subject.name, 'lawyer_complete_form')
+        self.assertEqual(self.subject.description, 'Attorney: Create Engagement Letter')
+        self.assertEqual(self.subject.signals, ['toolkit.apps.engageletter.signals.lawyer_complete_form'])
+        self.assertEqual(self.subject.action_name, 'Create Engagement Letter')
+        self.assertEqual(self.subject.action_type, Marker.ACTION_TYPE.redirect)
+        self.assertEqual(self.subject.action_user_class, ['lawyer'])
+
+
+class LawyerInviteUserMarkerTest(BaseTestMarker):
+    val = 0
+    clazz = LawyerInviteUserMarker
+
+    def test_properties(self):
+        self.assertTrue(type(self.subject), self.clazz)
+        self.assertEqual(self.subject.val, self.val)
+        self.assertEqual(self.subject.name, 'lawyer_invite_customer')
+        self.assertEqual(self.subject.description, 'Attorney: Invite client to complete & sign the Engagement Letter')
+        self.assertEqual(self.subject.signals, ['toolkit.apps.engageletter.signals.lawyer_invite_customer'])
+        self.assertEqual(self.subject.action_name, 'Invite Client to Complete & Sign')
+        self.assertEqual(self.subject.action_type, Marker.ACTION_TYPE.redirect)
+        self.assertEqual(self.subject.action_user_class, ['lawyer'])
+
+
+class CustomerCompleteLetterFormMarkerTest(BaseTestMarker):
+    val = 0
+    clazz = CustomerCompleteLetterFormMarker
+
+    def test_properties(self):
+        self.assertTrue(type(self.subject), self.clazz)
+        self.assertEqual(self.subject.val, self.val)
+        self.assertEqual(self.subject.name, 'customer_complete_form')
+        self.assertEqual(self.subject.description, 'Client: Complete Engagement Letter')
+        self.assertEqual(self.subject.signals, ['toolkit.apps.engageletter.signals.customer_complete_form'])
+        self.assertEqual(self.subject.action_name, 'Complete Engagement Letter')
+        self.assertEqual(self.subject.action_type, Marker.ACTION_TYPE.redirect)
+        self.assertEqual(self.subject.action_user_class, ['customer'])
+
+
+class CustomerSignAndSendMarkerTest(BaseTestMarker):
+    val = 0
+    clazz = CustomerSignAndSendMarker
+
+    def test_properties(self):
+        self.assertTrue(type(self.subject), self.clazz)
+        self.assertEqual(self.subject.val, self.val)
+        self.assertEqual(self.subject.name, 'customer_sign_and_send')
+        self.assertEqual(self.subject.description, 'Client: Sign & Send the Engagement Letter')
+        self.assertEqual(self.subject.signals, ['toolkit.apps.engageletter.signals.customer_sign_and_send'])
+        self.assertEqual(self.subject.action_name, 'Complete Engagement Letter')
+        self.assertEqual(self.subject.action_type, Marker.ACTION_TYPE.redirect)
+        self.assertEqual(self.subject.action_user_class, ['customer'])
+
+
+class CustomerDownloadMarkerTest(BaseTestMarker):
+    val = 0
+    clazz = CustomerDownloadMarker
+
+    def test_properties(self):
+        self.assertTrue(type(self.subject), self.clazz)
+        self.assertEqual(self.subject.val, self.val)
+        self.assertEqual(self.subject.name, 'customer_download_letter')
+        self.assertEqual(self.subject.description, 'Client: Download Signed Engagement Letter')
+        self.assertEqual(self.subject.signals, ['toolkit.apps.engageletter.signals.customer_download_letter'])
+        self.assertEqual(self.subject.action_name, 'Download Engagement Letter')
+        self.assertEqual(self.subject.action_type, Marker.ACTION_TYPE.redirect)
+        self.assertEqual(self.subject.action_user_class, ['customer'])
+
+
+class LawyerDownloadMarkerTest(BaseTestMarker):
+    val = 0
+    clazz = LawyerDownloadMarker
+
+    def test_properties(self):
+        self.assertTrue(type(self.subject), self.clazz)
+        self.assertEqual(self.subject.val, self.val)
+        self.assertEqual(self.subject.name, 'lawyer_download_letter')
+        self.assertEqual(self.subject.description, 'Attorney: Download Signed Engagement Letter')
+        self.assertEqual(self.subject.signals, ['toolkit.apps.engageletter.signals.lawyer_download_letter'])
+        self.assertEqual(self.subject.action_name, 'Download Engagement Letter')
+        self.assertEqual(self.subject.action_type, Marker.ACTION_TYPE.redirect)
+        self.assertEqual(self.subject.action_user_class, ['lawyer'])
+
+
+class ProcessCompleteMarkerTest(BaseTestMarker):
+    val = 0
+    clazz = ProcessCompleteMarker
+
+    def test_properties(self):
+        self.assertTrue(type(self.subject), self.clazz)
+        self.assertEqual(self.subject.name, 'complete')
+        self.assertEqual(self.subject.val, self.val)
+        self.assertEqual(self.subject.description, 'Process Complete')
+        self.assertEqual(self.subject.signals, ['toolkit.apps.engageletter.signals.complete'])
+        self.assertEqual(self.subject.action_name, None)
+        self.assertEqual(self.subject.action_type, None)
+        self.assertEqual(self.subject.action_user_class, [])
diff --git a/toolkit/apps/engageletter/urls.py b/toolkit/apps/engageletter/urls.py
new file mode 100644
index 0000000..e69de29
diff --git a/toolkit/apps/engageletter/views.py b/toolkit/apps/engageletter/views.py
new file mode 100644
index 0000000..91ea44a
--- /dev/null
+++ b/toolkit/apps/engageletter/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
-- 
1.8.4.2

From c51c88fac381766859206cfa90a7d70af04cf75d Mon Sep 17 00:00:00 2001
From: Ross Crawford-d'Heureuse <ross@lawpal.com>
Date: Tue, 14 Jan 2014 13:11:26 +0100
Subject: [PATCH] Added engage letter app to settings and urls

---
 toolkit/settings.py | 3 +++
 toolkit/urls.py     | 3 +++
 2 files changed, 6 insertions(+)

diff --git a/toolkit/settings.py b/toolkit/settings.py
index 7ada367..a01f6b4 100644
--- a/toolkit/settings.py
+++ b/toolkit/settings.py
@@ -83,8 +83,11 @@ PROJECT_APPS = (
     'toolkit.apps.default',
     'toolkit.apps.dash',
     'toolkit.apps.me',
+    # Main Workspace
     'toolkit.apps.workspace',
+    # Apps
     'toolkit.apps.eightythreeb',
+    'toolkit.apps.engageletter',
 )
 
 HELPER_APPS = (
diff --git a/toolkit/urls.py b/toolkit/urls.py
index b8ac00a..2749d93 100644
--- a/toolkit/urls.py
+++ b/toolkit/urls.py
@@ -13,8 +13,11 @@ urlpatterns = patterns('',
     url(r'^me/pasword/', include('password_reset.urls')),
     url(r'^me/', include('toolkit.apps.me.urls', namespace='me')),
 
+    # primary workspace
     url(r'^workspace/', include('toolkit.apps.workspace.urls', namespace='workspace')),
+    # apps
     url(r'^83b/', include('toolkit.apps.eightythreeb.urls', namespace='eightythreeb')),
+    url(r'^engagement-letters/', include('toolkit.apps.engageletter.urls', namespace='engageletter')),
 
     # home default terminator
     url(r'^', include('toolkit.apps.default.urls', namespace='public')),
-- 
1.8.4.2

